Trapping Rain Water
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9
 
Constraints:
n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105


Solution-
class Solution:
    def trap(self, height: List[int]) -> int:
        n=len(height)
        pmax=[]
        smax=[0]*n
        
        
        pmax.append(height[0])
        for i in range(1,len(height)):
            pmax.append(max(pmax[i-1],height[i]))
        
        print(pmax)
    
        n=len(height)
        smax[n-1]=height[n-1]
        for i in range(len(height)-2,-1,-1):
            smax[i]=max(smax[i+1],height[i])
        
        print(smax)
        
        amt=0
        for i in range(1,n-1):
            k=pmax[i-1]
            g=smax[i+1]
            dif=min(k,g)
            if(dif>height[i]):
                
                amt+=(dif-height[i])
        return(amt)
    
    
    
    
  
